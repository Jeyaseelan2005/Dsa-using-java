class Solution {
    public int majorityElement(int[] nums) {

        // Brute force - tc : O(n^2)
        int count = 1;
        int n = nums.length;

        for(int i=0;i<nums.length-1;i++) {
            for(int j=i+1;j<nums.length;j++) {
                if(nums[i] == nums[j]) {
                    count++;
                }
            }
            if(count > n/2) return nums[i];
        }
        return -1;


        // Better solution - tc : O(n logn)
        Arrays.sort(nums);
        int n = nums.length;
        return nums[n/2];

        //Optimal solution  tc : O(n) 
        int n = nums.length;
        int count = 0, el = Integer.MIN_VALUE;

        for(int i=0;i<n;i++) {
            if(count == 0) {
                count = 1;
                el = nums[i];
            }
            else if(el == nums[i]) count++;
            else count--;
        }
        int freq = 0;
        for (int num : nums) {
            if (num == el) freq++;
        }
        if (freq > n / 2) return el;
        else return -1; 
    }
}
