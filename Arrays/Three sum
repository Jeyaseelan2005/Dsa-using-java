class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

        // Brute force  tc : O(n^3)  sc : O(n)
        int n = nums.length;
        Set<List<Integer>> ans = new HashSet<>();

        for(int i=0;i<n-2;i++) {
            for(int j=i+1;j<n-1;j++) {
                for(int k=j+1;k<n;k++) {
                    if(nums[i] + nums[j] + nums [k] == 0){
                        List<Integer> triplet = Arrays.asList(nums[i],nums[j],nums[k]);
                        Collections.sort(triplet);
                        ans.add(triplet);
                    }
                }
            }
        }

        return new ArrayList<>(ans);


        // Optimal solution  tc : O(n log n + n^2)  sc : O(n)
        
        int n = nums.length;
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            int j = i + 1;
            int k = n - 1;

            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];

                if (sum > 0) {
                    k--;
                } else if (sum < 0) {
                    j++;
                } else {
                    ans.add(Arrays.asList(nums[i], nums[j], nums[k]));

                    while (j < k && nums[j] == nums[j + 1]) j++;  
                    while (j < k && nums[k] == nums[k - 1]) k--;  
                    j++;  
                    k--;
                }
            }
        }
        return ans;
        
    }
}
