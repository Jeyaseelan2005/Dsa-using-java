class Solution {
    public int subarraySum(int[] nums, int k) {

        //Brute force -  tc : O(n^2) 

        int count = 0;
        for (int start = 0; start < nums.length; start++) {
            int sum = 0;
            for (int end = start; end < nums.length; end++) {
                sum += nums[end];
                if (sum == k) count++;
            }
        }
        return count;


        //Optimal solution  tc : O(n logn) sc : O(n)
        int count = 0,sum = 0;
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,1);

        for(int i=0;i<nums.length;i++) {
            sum += nums[i];

            if(map.containsKey(sum-k)) {
                count += map.get(sum-k);
            }

            if(map.containsKey(sum)) {
                map.put(sum,map.get(sum) + 1);
            }
            else {
                map.put(sum,1);
            }

        } 
        return count;

    }
}
